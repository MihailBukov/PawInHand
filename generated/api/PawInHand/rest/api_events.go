// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * PawInHand API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

package modules

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strings"
)

// EventsAPIController binds http requests to an api service and writes the service results to the http response
type EventsAPIController struct {
	service      EventsAPIServicer
	errorHandler ErrorHandler
}

// EventsAPIOption for how the controller is set up.
type EventsAPIOption func(*EventsAPIController)

// WithEventsAPIErrorHandler inject ErrorHandler into controller
func WithEventsAPIErrorHandler(h ErrorHandler) EventsAPIOption {
	return func(c *EventsAPIController) {
		c.errorHandler = h
	}
}

// NewEventsAPIController creates a default api controller
func NewEventsAPIController(s EventsAPIServicer, opts ...EventsAPIOption) *EventsAPIController {
	controller := &EventsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the EventsAPIController
func (c *EventsAPIController) Routes() Routes {
	return Routes{
		"CreateEvent": Route{
			strings.ToUpper("Post"),
			"/api/events",
			c.CreateEvent,
		},
		"GetEvents": Route{
			strings.ToUpper("Get"),
			"/api/events",
			c.GetEvents,
		},
	}
}

// CreateEvent -
func (c *EventsAPIController) CreateEvent(w http.ResponseWriter, r *http.Request) {
	eventParam := Event{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&eventParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertEventRequired(eventParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertEventConstraints(eventParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateEvent(r.Context(), eventParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetEvents -
func (c *EventsAPIController) GetEvents(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetEvents(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
