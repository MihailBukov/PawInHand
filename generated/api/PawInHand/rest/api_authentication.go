// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * PawInHand API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

package modules

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strings"
)

// AuthenticationAPIController binds http requests to an api service and writes the service results to the http response
type AuthenticationAPIController struct {
	service      AuthenticationAPIServicer
	errorHandler ErrorHandler
}

// AuthenticationAPIOption for how the controller is set up.
type AuthenticationAPIOption func(*AuthenticationAPIController)

// WithAuthenticationAPIErrorHandler inject ErrorHandler into controller
func WithAuthenticationAPIErrorHandler(h ErrorHandler) AuthenticationAPIOption {
	return func(c *AuthenticationAPIController) {
		c.errorHandler = h
	}
}

// NewAuthenticationAPIController creates a default api controller
func NewAuthenticationAPIController(s AuthenticationAPIServicer, opts ...AuthenticationAPIOption) *AuthenticationAPIController {
	controller := &AuthenticationAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AuthenticationAPIController
func (c *AuthenticationAPIController) Routes() Routes {
	return Routes{
		"LoginUser": Route{
			strings.ToUpper("Post"),
			"/api/login",
			c.LoginUser,
		},
		"LogoutUser": Route{
			strings.ToUpper("Post"),
			"/api/logout",
			c.LogoutUser,
		},
	}
}

// LoginUser -
func (c *AuthenticationAPIController) LoginUser(w http.ResponseWriter, r *http.Request) {
	loginParam := Login{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&loginParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLoginRequired(loginParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertLoginConstraints(loginParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.LoginUser(r.Context(), loginParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// LogoutUser -
func (c *AuthenticationAPIController) LogoutUser(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.LogoutUser(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
