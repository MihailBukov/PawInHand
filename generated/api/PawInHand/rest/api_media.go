// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * PawInHand API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

package modules

import (
	"net/http"
	"os"
	"strings"
)

// MediaAPIController binds http requests to an api service and writes the service results to the http response
type MediaAPIController struct {
	service      MediaAPIServicer
	errorHandler ErrorHandler
}

// MediaAPIOption for how the controller is set up.
type MediaAPIOption func(*MediaAPIController)

// WithMediaAPIErrorHandler inject ErrorHandler into controller
func WithMediaAPIErrorHandler(h ErrorHandler) MediaAPIOption {
	return func(c *MediaAPIController) {
		c.errorHandler = h
	}
}

// NewMediaAPIController creates a default api controller
func NewMediaAPIController(s MediaAPIServicer, opts ...MediaAPIOption) *MediaAPIController {
	controller := &MediaAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the MediaAPIController
func (c *MediaAPIController) Routes() Routes {
	return Routes{
		"UploadPicture": Route{
			strings.ToUpper("Post"),
			"/api/upload/picture",
			c.UploadPicture,
		},
	}
}

// UploadPicture -
func (c *MediaAPIController) UploadPicture(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseMultipartForm(32 << 20); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var fileParam *os.File
	{
		param, err := ReadFormFileToTempFile(r, "file")
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "file", Err: err}, nil)
			return
		}

		fileParam = param
	}

	result, err := c.service.UploadPicture(r.Context(), fileParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
