// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * PawInHand API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

package modules

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ShelterAPIController binds http requests to an api service and writes the service results to the http response
type ShelterAPIController struct {
	service      ShelterAPIServicer
	errorHandler ErrorHandler
}

// ShelterAPIOption for how the controller is set up.
type ShelterAPIOption func(*ShelterAPIController)

// WithShelterAPIErrorHandler inject ErrorHandler into controller
func WithShelterAPIErrorHandler(h ErrorHandler) ShelterAPIOption {
	return func(c *ShelterAPIController) {
		c.errorHandler = h
	}
}

// NewShelterAPIController creates a default api controller
func NewShelterAPIController(s ShelterAPIServicer, opts ...ShelterAPIOption) *ShelterAPIController {
	controller := &ShelterAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ShelterAPIController
func (c *ShelterAPIController) Routes() Routes {
	return Routes{
		"DeleteShelterById": Route{
			strings.ToUpper("Delete"),
			"/api/shelters/{shelterId}",
			c.DeleteShelterById,
		},
		"GetAllShelters": Route{
			strings.ToUpper("Get"),
			"/api/shelters",
			c.GetAllShelters,
		},
		"GetShelterById": Route{
			strings.ToUpper("Get"),
			"/api/shelters/{shelterId}",
			c.GetShelterById,
		},
		"RegisterShelter": Route{
			strings.ToUpper("Post"),
			"/api/shelters",
			c.RegisterShelter,
		},
		"UpdateShelterById": Route{
			strings.ToUpper("Put"),
			"/api/shelters/{shelterId}",
			c.UpdateShelterById,
		},
	}
}

// DeleteShelterById -
func (c *ShelterAPIController) DeleteShelterById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	shelterIdParam := params["shelterId"]
	if shelterIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"shelterId"}, nil)
		return
	}
	result, err := c.service.DeleteShelterById(r.Context(), shelterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllShelters -
func (c *ShelterAPIController) GetAllShelters(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAllShelters(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetShelterById -
func (c *ShelterAPIController) GetShelterById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	shelterIdParam := params["shelterId"]
	if shelterIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"shelterId"}, nil)
		return
	}
	result, err := c.service.GetShelterById(r.Context(), shelterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RegisterShelter -
func (c *ShelterAPIController) RegisterShelter(w http.ResponseWriter, r *http.Request) {
	shelterParam := Shelter{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&shelterParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertShelterRequired(shelterParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertShelterConstraints(shelterParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RegisterShelter(r.Context(), shelterParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateShelterById -
func (c *ShelterAPIController) UpdateShelterById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	shelterIdParam := params["shelterId"]
	if shelterIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"shelterId"}, nil)
		return
	}
	shelterParam := Shelter{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&shelterParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertShelterRequired(shelterParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertShelterConstraints(shelterParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateShelterById(r.Context(), shelterIdParam, shelterParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
