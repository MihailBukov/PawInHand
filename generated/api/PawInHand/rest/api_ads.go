// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * PawInHand API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

package modules

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AdsAPIController binds http requests to an api service and writes the service results to the http response
type AdsAPIController struct {
	service      AdsAPIServicer
	errorHandler ErrorHandler
}

// AdsAPIOption for how the controller is set up.
type AdsAPIOption func(*AdsAPIController)

// WithAdsAPIErrorHandler inject ErrorHandler into controller
func WithAdsAPIErrorHandler(h ErrorHandler) AdsAPIOption {
	return func(c *AdsAPIController) {
		c.errorHandler = h
	}
}

// NewAdsAPIController creates a default api controller
func NewAdsAPIController(s AdsAPIServicer, opts ...AdsAPIOption) *AdsAPIController {
	controller := &AdsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AdsAPIController
func (c *AdsAPIController) Routes() Routes {
	return Routes{
		"CreateAd": Route{
			strings.ToUpper("Post"),
			"/api/ads",
			c.CreateAd,
		},
		"DeleteAdById": Route{
			strings.ToUpper("Delete"),
			"/api/ads/{adId}",
			c.DeleteAdById,
		},
		"GetAdById": Route{
			strings.ToUpper("Get"),
			"/api/ads/{adId}",
			c.GetAdById,
		},
		"GetAllAds": Route{
			strings.ToUpper("Get"),
			"/api/ads",
			c.GetAllAds,
		},
		"UpdateAdById": Route{
			strings.ToUpper("Put"),
			"/api/ads/{adId}",
			c.UpdateAdById,
		},
	}
}

// CreateAd -
func (c *AdsAPIController) CreateAd(w http.ResponseWriter, r *http.Request) {
	adParam := Ad{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&adParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAdRequired(adParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAdConstraints(adParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateAd(r.Context(), adParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteAdById -
func (c *AdsAPIController) DeleteAdById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adIdParam := params["adId"]
	if adIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"adId"}, nil)
		return
	}
	result, err := c.service.DeleteAdById(r.Context(), adIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAdById -
func (c *AdsAPIController) GetAdById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adIdParam := params["adId"]
	if adIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"adId"}, nil)
		return
	}
	result, err := c.service.GetAdById(r.Context(), adIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllAds -
func (c *AdsAPIController) GetAllAds(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAllAds(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateAdById -
func (c *AdsAPIController) UpdateAdById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adIdParam := params["adId"]
	if adIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"adId"}, nil)
		return
	}
	adParam := Ad{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&adParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAdRequired(adParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAdConstraints(adParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateAdById(r.Context(), adIdParam, adParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
