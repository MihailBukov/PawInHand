// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * PawInHand API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

package modules

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// PostsAPIController binds http requests to an api service and writes the service results to the http response
type PostsAPIController struct {
	service      PostsAPIServicer
	errorHandler ErrorHandler
}

// PostsAPIOption for how the controller is set up.
type PostsAPIOption func(*PostsAPIController)

// WithPostsAPIErrorHandler inject ErrorHandler into controller
func WithPostsAPIErrorHandler(h ErrorHandler) PostsAPIOption {
	return func(c *PostsAPIController) {
		c.errorHandler = h
	}
}

// NewPostsAPIController creates a default api controller
func NewPostsAPIController(s PostsAPIServicer, opts ...PostsAPIOption) *PostsAPIController {
	controller := &PostsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PostsAPIController
func (c *PostsAPIController) Routes() Routes {
	return Routes{
		"CreatePost": Route{
			strings.ToUpper("Post"),
			"/api/posts",
			c.CreatePost,
		},
		"DeletePostById": Route{
			strings.ToUpper("Delete"),
			"/api/posts/{postId}",
			c.DeletePostById,
		},
		"GetAllPosts": Route{
			strings.ToUpper("Get"),
			"/api/posts",
			c.GetAllPosts,
		},
		"GetPostById": Route{
			strings.ToUpper("Get"),
			"/api/posts/{postId}",
			c.GetPostById,
		},
		"UpdatePostById": Route{
			strings.ToUpper("Put"),
			"/api/posts/{postId}",
			c.UpdatePostById,
		},
	}
}

// CreatePost -
func (c *PostsAPIController) CreatePost(w http.ResponseWriter, r *http.Request) {
	postParam := Post{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&postParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPostRequired(postParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPostConstraints(postParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreatePost(r.Context(), postParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeletePostById -
func (c *PostsAPIController) DeletePostById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	postIdParam := params["postId"]
	if postIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"postId"}, nil)
		return
	}
	result, err := c.service.DeletePostById(r.Context(), postIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllPosts -
func (c *PostsAPIController) GetAllPosts(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAllPosts(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPostById -
func (c *PostsAPIController) GetPostById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	postIdParam := params["postId"]
	if postIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"postId"}, nil)
		return
	}
	result, err := c.service.GetPostById(r.Context(), postIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdatePostById -
func (c *PostsAPIController) UpdatePostById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	postIdParam := params["postId"]
	if postIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"postId"}, nil)
		return
	}
	postParam := Post{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&postParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPostRequired(postParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPostConstraints(postParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdatePostById(r.Context(), postIdParam, postParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
