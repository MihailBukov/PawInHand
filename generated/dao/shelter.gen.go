// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"PawInHand/generated/dao/model"
)

func newShelter(db *gorm.DB, opts ...gen.DOOption) shelter {
	_shelter := shelter{}

	_shelter.shelterDo.UseDB(db, opts...)
	_shelter.shelterDo.UseModel(&model.Shelter{})

	tableName := _shelter.shelterDo.TableName()
	_shelter.ALL = field.NewAsterisk(tableName)
	_shelter.ID = field.NewString(tableName, "id")
	_shelter.Name = field.NewString(tableName, "name")
	_shelter.Street = field.NewString(tableName, "street")
	_shelter.City = field.NewString(tableName, "city")
	_shelter.State = field.NewString(tableName, "state")
	_shelter.Zip = field.NewString(tableName, "zip")
	_shelter.Phone = field.NewString(tableName, "phone")
	_shelter.Email = field.NewString(tableName, "email")
	_shelter.CreatedAt = field.NewTime(tableName, "created_at")
	_shelter.UpdatedAt = field.NewTime(tableName, "updated_at")

	_shelter.fillFieldMap()

	return _shelter
}

type shelter struct {
	shelterDo

	ALL       field.Asterisk
	ID        field.String
	Name      field.String
	Street    field.String
	City      field.String
	State     field.String
	Zip       field.String
	Phone     field.String
	Email     field.String
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (s shelter) Table(newTableName string) *shelter {
	s.shelterDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s shelter) As(alias string) *shelter {
	s.shelterDo.DO = *(s.shelterDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *shelter) updateTableName(table string) *shelter {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.Name = field.NewString(table, "name")
	s.Street = field.NewString(table, "street")
	s.City = field.NewString(table, "city")
	s.State = field.NewString(table, "state")
	s.Zip = field.NewString(table, "zip")
	s.Phone = field.NewString(table, "phone")
	s.Email = field.NewString(table, "email")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *shelter) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *shelter) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["street"] = s.Street
	s.fieldMap["city"] = s.City
	s.fieldMap["state"] = s.State
	s.fieldMap["zip"] = s.Zip
	s.fieldMap["phone"] = s.Phone
	s.fieldMap["email"] = s.Email
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s shelter) clone(db *gorm.DB) shelter {
	s.shelterDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s shelter) replaceDB(db *gorm.DB) shelter {
	s.shelterDo.ReplaceDB(db)
	return s
}

type shelterDo struct{ gen.DO }

type IShelterDo interface {
	gen.SubQuery
	Debug() IShelterDo
	WithContext(ctx context.Context) IShelterDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IShelterDo
	WriteDB() IShelterDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IShelterDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IShelterDo
	Not(conds ...gen.Condition) IShelterDo
	Or(conds ...gen.Condition) IShelterDo
	Select(conds ...field.Expr) IShelterDo
	Where(conds ...gen.Condition) IShelterDo
	Order(conds ...field.Expr) IShelterDo
	Distinct(cols ...field.Expr) IShelterDo
	Omit(cols ...field.Expr) IShelterDo
	Join(table schema.Tabler, on ...field.Expr) IShelterDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IShelterDo
	RightJoin(table schema.Tabler, on ...field.Expr) IShelterDo
	Group(cols ...field.Expr) IShelterDo
	Having(conds ...gen.Condition) IShelterDo
	Limit(limit int) IShelterDo
	Offset(offset int) IShelterDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IShelterDo
	Unscoped() IShelterDo
	Create(values ...*model.Shelter) error
	CreateInBatches(values []*model.Shelter, batchSize int) error
	Save(values ...*model.Shelter) error
	First() (*model.Shelter, error)
	Take() (*model.Shelter, error)
	Last() (*model.Shelter, error)
	Find() ([]*model.Shelter, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Shelter, err error)
	FindInBatches(result *[]*model.Shelter, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Shelter) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IShelterDo
	Assign(attrs ...field.AssignExpr) IShelterDo
	Joins(fields ...field.RelationField) IShelterDo
	Preload(fields ...field.RelationField) IShelterDo
	FirstOrInit() (*model.Shelter, error)
	FirstOrCreate() (*model.Shelter, error)
	FindByPage(offset int, limit int) (result []*model.Shelter, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IShelterDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s shelterDo) Debug() IShelterDo {
	return s.withDO(s.DO.Debug())
}

func (s shelterDo) WithContext(ctx context.Context) IShelterDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s shelterDo) ReadDB() IShelterDo {
	return s.Clauses(dbresolver.Read)
}

func (s shelterDo) WriteDB() IShelterDo {
	return s.Clauses(dbresolver.Write)
}

func (s shelterDo) Session(config *gorm.Session) IShelterDo {
	return s.withDO(s.DO.Session(config))
}

func (s shelterDo) Clauses(conds ...clause.Expression) IShelterDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s shelterDo) Returning(value interface{}, columns ...string) IShelterDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s shelterDo) Not(conds ...gen.Condition) IShelterDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s shelterDo) Or(conds ...gen.Condition) IShelterDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s shelterDo) Select(conds ...field.Expr) IShelterDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s shelterDo) Where(conds ...gen.Condition) IShelterDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s shelterDo) Order(conds ...field.Expr) IShelterDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s shelterDo) Distinct(cols ...field.Expr) IShelterDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s shelterDo) Omit(cols ...field.Expr) IShelterDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s shelterDo) Join(table schema.Tabler, on ...field.Expr) IShelterDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s shelterDo) LeftJoin(table schema.Tabler, on ...field.Expr) IShelterDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s shelterDo) RightJoin(table schema.Tabler, on ...field.Expr) IShelterDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s shelterDo) Group(cols ...field.Expr) IShelterDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s shelterDo) Having(conds ...gen.Condition) IShelterDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s shelterDo) Limit(limit int) IShelterDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s shelterDo) Offset(offset int) IShelterDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s shelterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IShelterDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s shelterDo) Unscoped() IShelterDo {
	return s.withDO(s.DO.Unscoped())
}

func (s shelterDo) Create(values ...*model.Shelter) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s shelterDo) CreateInBatches(values []*model.Shelter, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s shelterDo) Save(values ...*model.Shelter) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s shelterDo) First() (*model.Shelter, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Shelter), nil
	}
}

func (s shelterDo) Take() (*model.Shelter, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Shelter), nil
	}
}

func (s shelterDo) Last() (*model.Shelter, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Shelter), nil
	}
}

func (s shelterDo) Find() ([]*model.Shelter, error) {
	result, err := s.DO.Find()
	return result.([]*model.Shelter), err
}

func (s shelterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Shelter, err error) {
	buf := make([]*model.Shelter, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s shelterDo) FindInBatches(result *[]*model.Shelter, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s shelterDo) Attrs(attrs ...field.AssignExpr) IShelterDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s shelterDo) Assign(attrs ...field.AssignExpr) IShelterDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s shelterDo) Joins(fields ...field.RelationField) IShelterDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s shelterDo) Preload(fields ...field.RelationField) IShelterDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s shelterDo) FirstOrInit() (*model.Shelter, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Shelter), nil
	}
}

func (s shelterDo) FirstOrCreate() (*model.Shelter, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Shelter), nil
	}
}

func (s shelterDo) FindByPage(offset int, limit int) (result []*model.Shelter, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s shelterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s shelterDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s shelterDo) Delete(models ...*model.Shelter) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *shelterDo) withDO(do gen.Dao) *shelterDo {
	s.DO = *do.(*gen.DO)
	return s
}
